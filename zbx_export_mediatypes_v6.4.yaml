zabbix_export:
  version: '6.4'
  media_types:
    - name: Glpi
      type: WEBHOOK
      parameters:
        - name: Event_Update_Status
          value: '{EVENT.UPDATE.STATUS}'
        - name: Event_Value
          value: '{EVENT.VALUE}'
        - name: glpi_apptoken
          value: CHANGE-ME
        - name: glpi_event_id
          value: '{EVENT.ID}'
        - name: glpi_event_severity
          value: '{EVENT.NSEVERITY}'
        - name: glpi_event_update_mess
          value: '{EVENT.UPDATE.MESSAGE}'
        - name: glpi_password
          value: CHANGE-ME
        - name: glpi_tgrid
          value: '{TRIGGER.ID}'
        - name: glpi_ticket_id
          value: '{EVENT.TAGS.zbx_glpi_ticket}'
        - name: glpi_url
          value: CHANGE-ME
        - name: glpi_user
          value: glpi
        - name: glpi_user_token
          value: CHANGE-ME
        - name: HTTPProxy
        - name: Message
          value: '{ALERT.MESSAGE}'
        - name: Subject
          value: '{ALERT.SUBJECT}'
        - name: To
          value: '{ALERT.SENDTO}'
        - name: zb_web_url
          value: CHANGE-ME
      script: |
        var params = JSON.parse(value),
            result = { tags: {} };
        var url_api = params.glpi_url + "apirest.php/";
        var url_ticket = params.glpi_url + "front/ticket.form.php?id=";
        
        function GetSession() {
            try {
                var userpass = params.glpi_user + ':' + params.glpi_password;
                var user_token = params.glpi_user_token;
                var fullUrl = url_api + 'initSession' + '?app_token=' + encodeURIComponent(params.glpi_apptoken) + '&user_token=' + encodeURIComponent(user_token);
                req = new HttpRequest();
                proxy = params.HTTPProxy;
                req.setProxy(proxy);
                req.addHeader('Content-Type', 'application/json');
                resp = req.get(fullUrl);
        
                if (req.getStatus() != 200) {
                    Zabbix.log(4, '[GLPI Webhook] login failed: ' + resp);
                    throw 'Response: ' + req.getStatus();
                }
                resp = JSON.parse(resp);
                return resp.session_token;
        
            } catch (error) {
                Zabbix.log(4, '[GLPI Webhook] login failed: ' + error);
                throw 'Login failed: ' + error + '.';
            }
        }
        
        
        function CreateTicket(session_token) {
            try {
                req = new HttpRequest();
                fields = {};
                proxy = params.HTTPProxy;
                req.setProxy(proxy);
                req.addHeader('Content-Type: application/json');
                req.addHeader('Session-Token:' + session_token);
                req.addHeader('App-Token:' + params.glpi_apptoken);
                fields.input = {
                    "name": params.Subject,
                    "content": params.Message + "URL_EVENT: " + params.zb_web_url + "tr_events.php?triggerid=" + params.glpi_tgrid + "&eventid=" + params.glpi_event_id,
                    "itilcategories_id": params.glpi_itilcategories_id,
                    "entities_id": params.glpi_entities_id,
                    "urgency": params.glpi_urgency,
                    "impact": params.glpi_impact,
                    "priority": params.glpi_priority,
                    "_users_id_assign": params.To
                };
        
                resp = req.post(url_api + 'Ticket', JSON.stringify({ "input": fields.input }));
                Zabbix.Log(4, '[GLPI Webhook] CreateTicket response: ' + resp);
                resp = JSON.parse(resp);
                return resp.id;
            } catch (error) {
                Zabbix.Log(4, '[GLPI Webhook] CreateTicket failed: ' + error);
                throw 'CreateTicket failed: ' + error + '.';
            }
        }
        
        function UpdateTicket(session_token) {
            try {
                req = new HttpRequest();
                fields = {};
                proxy = params.HTTPProxy;
                req.setProxy(proxy);
                req.addHeader('Content-Type: application/json');
                req.addHeader('Session-Token:' + session_token);
                req.addHeader('App-Token:' + params.glpi_apptoken);
        
                if (params.Event_Value === '0') {
                    fields.input = { "itemtype": "Ticket", "items_id": params.glpi_ticket_id, "content": params.Message };
                    resp = req.post(url_api + 'Ticket/' + params.glpi_ticket_id + "/ITILSolution", JSON.stringify({ "input": fields.input }));
                } else {
                    fields.input = { "itemtype": "Ticket", "items_id": params.glpi_ticket_id, "content": params.Message };
                    resp = req.post(url_api + 'Ticket/' + params.glpi_ticket_id + "/ITILFollowup", JSON.stringify({ "input": fields.input }));
                }
        
                Zabbix.Log(4, '[GLPI Webhook] UpdateTicket response: ' + resp);
                resp = JSON.parse(resp);
                tikedid = params.glpi_ticket_id;
                return resp.tikedid;
            } catch (error) {
                Zabbix.Log(4, '[GLPI Webhook] CreateTicket failed: ' + error);
                throw 'CreateTicket failed: ' + error + '.';
            }
        
        }
        
        function KillSession(session_token) {
            try {
                req = new HttpRequest();
                proxy = params.HTTPProxy;
                req.setProxy(proxy);
                req.addHeader('Content-Type: application/json');
                req.addHeader('Session-Token:' + session_token);
                req.addHeader('App-Token:' + params.glpi_apptoken);
                resp = req.get(url_api + 'killSession');
                Zabbix.Log(4, '[GLPI Webhook] KillSession response: ' + resp);
        
                if (req.getStatus() != 200) {
                    Zabbix.Log(4, '[GLPI Webhook] KillSession failed: ' + resp);
                    throw 'Response: ' + req.getStatus();
                }
            } catch (error) {
                Zabbix.Log(4, '[GLPI Webhook] KillSession failed: ' + error);
                throw 'KillSession failed: ' + error + '.';
            }
        }
        
        
        try {
            if (params.glpi_user === "") {
                throw 'Incorrect value is given for parameter "glpi_user": parameter is missing';
            }
            if (params.glpi_password === "") {
                throw 'Incorrect value is given for parameter "password": parameter is missing';
            }
            if (params.glpi_apptoken === "") {
                throw 'Incorrect value is given for parameter "glpi_apptoken": parameter is missing';
            }
            if (params.glpi_url === "") {
                throw 'Incorrect value is given for parameter "glpi_url": parameter is missing';
            }
            session = GetSession();
            Zabbix.log(4, '[GLPI Webhook] Login OK session_token: ' + session);
        
            if (params.Event_Value === '1' && params.Event_Update_Status === '0') {
                nt = CreateTicket(session);
                Zabbix.log(4, '[GLPI Webhook] OK ticket: ' + nt);
                result.tags.zbx_glpi_ticket = nt;
                result.tags.zbx_glpi_ticketlink = url_ticket + nt;
            } else {
                ut = UpdateTicket(session);
                Zabbix.log(4, '[GLPI Webhook] OK ticket: ' + ut);
            }
        
            KillSession(session);
        
            return JSON.stringify(result);
        } catch (error) {
            Zabbix.log(4, '[GLPI Webhook] notification failed: ' + error);
            throw 'Sending failed: ' + error + '.';
        }
      process_tags: 'YES'
      show_event_menu: 'YES'
      event_menu_url: '{EVENT.TAGS.zbx_glpi_ticketlink}'
      event_menu_name: 'GLPI:# {EVENT.TAGS.zbx_glpi_ticket}'
      description: |
        Develop by: Andrey Amado for AKA Sistemas
        Help: andreyamado@akasistemas.com
        License: GPLv2
        
        The documentation can be found on:
        https://yourglpirootlocation/apirest.php/
        
        Additionally, you must enable the API access from glpi and activate the user authentication and app token.
        
        Adjust the parameters according to your installation.
        The "To" parameter must be the id_user from GLPI.
        
        V2 what is the new:
        - add update and close support ticket
        - add URL zabbix trigger into the ticket.
        - V6.4 support by empereira (https://github.com/empereira)
      message_templates:
        - event_source: TRIGGERS
          operation_mode: PROBLEM
          subject: 'Problem: {EVENT.NAME}'
          message: |
            Problem started at {EVENT.TIME} on {EVENT.DATE}
            Problem name: {EVENT.NAME}
            Host: {HOST.NAME}
            Severity: {EVENT.SEVERITY}
            Operational data: {EVENT.OPDATA}
            Original problem ID: {EVENT.ID}
            {TRIGGER.URL}
        - event_source: TRIGGERS
          operation_mode: RECOVERY
          subject: 'Resolved in {EVENT.DURATION}: {EVENT.NAME}'
          message: |
            Problem has been resolved at {EVENT.RECOVERY.TIME} on {EVENT.RECOVERY.DATE}
            Problem name: {EVENT.NAME}
            Problem duration: {EVENT.DURATION}
            Host: {HOST.NAME}
            Severity: {EVENT.SEVERITY}
            Original problem ID: {EVENT.ID}
            {TRIGGER.URL}
            Internal Message: {EVENT.UPDATE.MESSAGE} 
        - event_source: TRIGGERS
          operation_mode: UPDATE
          subject: 'Updated problem in {EVENT.AGE}: {EVENT.NAME}'
          message: |
            {USER.FULLNAME} {EVENT.UPDATE.ACTION} problem at {EVENT.UPDATE.DATE} {EVENT.UPDATE.TIME}.
            {EVENT.UPDATE.MESSAGE}
            
            Current problem status is {EVENT.STATUS}, age is {EVENT.AGE}, acknowledged: {EVENT.ACK.STATUS}.
